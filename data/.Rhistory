# Store in new table for that variable where we have one value per date per
idDates = Urine[Urine$ID==id,]$date
idPositive = total$positiveDate[total$ID==id]
presence = TRUE %in% (Urine[Urine$ID==id,][(idDates >= idPositive & idDates < (idPositive + dateRange)),]$urine_coinfection)
Urine2 <- Urine2 %>% add_row(ID=id,urine_coinfection=presence)
}
Urine <- Urine2
rm(Urine2)
variables = list(BE,BNP,CRP,DDM,eGFR,FER,fib,Glucose,HB,HBA1c,LDH,PCT,PLT,trig,trop,FBCLymph,FBCNeutr,FBCWCC,FBCNLR,ClotAPTT,ClotPT,poctLAC,O2,CO2,poctpH,Vir,BC,Resp,Urine)
for (variable in variables){
total <- merge(total,variable, all.x=TRUE)
}
total <- total %>% mutate(coinfection = if_else((viral_coinfection == TRUE | resp_coinfection == TRUE | bc_coinfection == TRUE | urine_coinfection == TRUE),TRUE,FALSE,FALSE))
totalBinary <- total
AvonCap <- read.csv(file("AvonCap.csv"))
AvonCap = AvonCap %>% rename(ID = uob_ID)
AvonCap <- AvonCap[!duplicated(AvonCap$ID),]
AvonCap <- subset(AvonCap, select = -c(Repeat.Instrument,Repeat.Instance,
COVID.19.diagnosis))
AvonCap = AvonCap %>%
rename(
Community.Pneumonia.Radio = Final.Standard.of.Care.LRTD.related.diagnosis..choice.CAP...radiologically.confirmed.,
Community.Pneumonia.Clin = Final.Standard.of.Care.LRTD.related.diagnosis..choice.CAP...clinically.confirmed..but.not.on.radiology..,
Community.Acquired.Pneumonia.No = Final.Standard.of.Care.LRTD.related.diagnosis..choice.CAP...no.radiology.performed.,
Acute_bronchitis = Final.Standard.of.Care.LRTD.related.diagnosis..choice.Acute.bronchitis.,
Exacerbation_of_COPD = Final.Standard.of.Care.LRTD.related.diagnosis..choice.Exacerbation.of.COPD.,
Empyema_lung_abscess = Final.Standard.of.Care.LRTD.related.diagnosis..choice.Empyema.lung.abscess.,
LRTI_not_further_specified = Final.Standard.of.Care.LRTD.related.diagnosis..choice.LRTI...not.further.specified.,
Congestive_heart_failure = Final.Standard.of.Care.LRTD.related.diagnosis..choice.Congestive.heart.failure.,
Non_infectious_process = Final.Standard.of.Care.LRTD.related.diagnosis..choice.Non.infectious.process.,
Non_LRTD_infection_related_diagnosis = Final.Standard.of.Care.LRTD.related.diagnosis..choice.Non.LRTD.infection.related.diagnosis.,
Oth.LRTI.Specified =
Final.Standard.of.Care.LRTD.related.diagnosis..choice.Other.LRTI.specified.,
NYHA_Heart_failure = NYHA...Heart.Failure..nbsp.,
CRB65_Score = CRB65.Score,
NEWS2_Score = NEWS.2.Score,
Respiratory_Disease_None = Respiratory.Disease..choice.None.,
COPD = Respiratory.Disease..choice.COPD..Chronic.Obstructive.Pulmonary.Disease.Emphysema..,
Asthma = Respiratory.Disease..choice.Asthma.,
Bronchiectasis = Respiratory.Disease..choice.Bronchiectasis.,
Pulmonary_Fibrosis_Interstitial_Lung_Disease = Respiratory.Disease..choice.Pulmonary.Fibrosis.Interstitial.Lung.Disease.,
Respiratory_Disease_other = Respiratory.Disease..choice.Other.,
Chronic_heart_disease_none = Chronic.Heart.Disease..choice.None.,
Hypertension = Chronic.Heart.Disease..choice.Hypertension.,
Atrial_Fibrillation = Chronic.Heart.Disease..choice.Atrial.Fibrillation.,
Ischaemic_heart_disease = Chronic.Heart.Disease..choice.Ischaemic.heart.disease.,
Heart_failure = Chronic.Heart.Disease..choice.Heart.failure.CCF.,
Chronic_heart_disease_other = Chronic.Heart.Disease..choice.Other.,
Chronic_Kidney_Disease = Chronic.Kidney.Disease..CKD..Mod.Severe..eGFR..30..Cr.265.umol.L..dialysis..transplantation..uremic.syndrome,
Liver_disease = Liver.Disease.Mild...nbsp.cirrhosis.without.portal.HTN..chronic.hepatitis..Mod.Severe...nbsp.cirrhosis.with.portal.HTN.....variceal.bleeding,
Diabetes = Diabetes,
Cognitive_Impairment_Dementia_none = Cognitive.Impairment.Dementia..choice.None.,
Dementia = Cognitive.Impairment.Dementia..choice.Dementia.,
Cognitive_impairment = Cognitive.Impairment.Dementia..choice.Cognitive.Impairment.,
CVA_Stroke = Cognitive.Impairment.Dementia..choice.CVA..stroke..,
TIA_mini_stroke = Cognitive.Impairment.Dementia..choice.TIA..mini.stroke..,
Hemiplegiahemiplegia_or_paraplegia = Hemiplegiahemiplegia.or.paraplegia,
Peripheral_vascular_disease = Peripheral.Vascular.Disease.Intermittent.claudication..periph..arterial.bypass.for.insufficiency..gangrene..acute.arterial.insufficiency..untreated.aneurysm....6cm..nbsp.,
Immunosuppressive_medication = Immunosuppressive.Medication.includes.oral.steroids..biologics..chemotherapy.,
Immunodeficiency = Immunodeficiency.eg.SCID..hypogammaglobulinaemia..splenectomy.,
Connective_tissue_disease = Connective.Tissue.Disease..SLE..polymyositis..mixed.nbsp.Connective.Tissue.Disease..polymyalgia.rheumatica..moderate.to.severe.Rheumatoid.Arthritis.,
HIV_negative_or_not_tested = HIV.status..choice.Negative..no.HIV...or.not.tested.,
HIV_positive = HIV.status..choice.HIV.,
AIDS = HIV.status..choice.AIDS.,
Solid_organ_cancer_malignancy = Solid.Organ.Cancer.Malignancy.Initially.treated.in.the.last.5.years.exclude.non.melanomatous.skin.cancers.and.in.situ.cervical.carcinoma,
Organ_transplantation = Organ.Transplantation,
Pregnancy_post_partum = Pregnancy.Post.partum,
Gastric_Duodenal_Ulcer_disease = Gastric.Duodenal.Ulcer.Disease.Patients.who.have.required.treatment.for.PUD.nbsp.,
Rockwood_frailty_score = Rockwood.Frailty.Score,
Radiology_result = Radiology.Result
)
AvonCap <- subset(AvonCap, select = c(ID,PSI,
NYHA_Heart_failure,CRB65_Score,
NEWS2_Score,COPD,Asthma,Bronchiectasis,
Respiratory_Disease_other, Hypertension,
Chronic_Kidney_Disease,Liver_disease,
Diabetes,CVA_Stroke,TIA_mini_stroke,
Immunodeficiency, HIV_positive))
totalBinary <- merge(total,AvonCap,by=c("ID"),all.x=TRUE)
drop <- c("ID","admissionDate","dischargeDate","Gender","Age","died","went_to_icu","severeOutcome")
missingData = total[,!(names(total) %in% drop)]
missingData %>% ff_glimpse()
missingData %>% missing_plot()
#replaceNAs_totalBinary <- totalBinary %>% dplyr::select(-ID,-admissionDate,-dischargeDate,-ITU_End,-ITU_Start,-deathDate,-Gender,-Age,-died,-went_to_icu,-severeOutcome,-positiveDate,-coinfection) %>% replace_na("Test not taken")
all_columns <- c("BE_val","BNP_val","CRP_val","DDM_val","eGFR_val","FER_val","fib_val","Glucose_val","HB_val","HBA1c_val","LDH_val","PCT_val","PLT_val","trig_val","trop_val","Lymphocytes","Neutrophils","WCC","NLR_val","APTT_val","PT_val","poctLAC_val","O2_val","CO2_val","poctpH_val","viral_coinfection","bc_coinfection","resp_coinfection","urine_coinfection")
imputed_columns <- c("eGFR_val","WCC","Neutrophils","Lymphocytes","NLR_val","HB_val","PLT_val","CRP_val")
# Test not taken columns
tnt_columns <- setdiff(all_columns, imputed_columns)
# Replace NA with "Test not taken"
totalBinary[tnt_columns][is.na(totalBinary[tnt_columns])] <- "Test not taken"
totalBinary$OnAdmission <- with(totalBinary, ifelse(positiveDate-admissionDate >=8,
FALSE,TRUE))
if (dateRange==1) {
if (readingwanted==0) {
print("1 worst saved")
write.csv(x=totalBinary, file="totalBinary1worst.csv")
}
if (readingwanted==1) {
print("1 first saved")
write.csv(x=totalBinary, file="totalBinary1first.csv")
}
if (readingwanted==2) {
print("1 mean saved")
write.csv(x=totalBinary, file="totalBinary1mean.csv")
}
}
if (dateRange==3) {
if (readingwanted==0) {
print("3 worst saved")
write.csv(x=totalBinary, file="totalBinary3worst.csv")
}
if (readingwanted==1) {
print("3 first saved")
write.csv(x=totalBinary, file="totalBinary3first.csv")
}
if (readingwanted==2) {
print("3 mean saved")
write.csv(x=totalBinary, file="totalBinary3mean.csv")
}
}
if (dateRange==5) {
if (readingwanted==0) {
print("5 worst saved")
write.csv(x=totalBinary, file="totalBinary5worst.csv")
}
if (readingwanted==1) {
print("5 first saved")
write.csv(x=totalBinary, file="totalBinary5first.csv")
}
if (readingwanted==2) {
print("5 mean saved")
write.csv(x=totalBinary, file="totalBinary5mean.csv")
}
}
source("Z:/brian/LABMARCS-main/LogisticLABMARCSall.R", echo=TRUE)
source("Z:/brian/LABMARCS-main/LogisticLABMARCSall.R", echo=TRUE)
source("Z:/brian/LABMARCS-main/CoxLABMARCSall.R", echo=TRUE)
install.packages('brms')
install.packages("rstanarm")
length(str)
install.packages("Rtools")
Sys.which("make")
Sys.which("make")
install.packages("rstanarm")
library(rstanarm)
library(ggplot2)
library(hrbrthemes)
library(tidyverse)
library(plotly)
library(BBmisc)
library(scales)
library(dplyr)
library(naniar)
library(gridExtra)
library(knitr)
library(ggplot2)
library(hrbrthemes)
library(tidyverse)
library(plotly)
library(BBmisc)
library(scales)
library(dplyr)
library(naniar)
library(gridExtra)
library(knitr)
library(finalfit)
library(data.table)
# Global variables
# MasterAnalysisOn==1 prevents the dateRange and readingwanted variables from
# being overwritten, but the option to turn this off and run this script without
# first running MasterAnalysis.R is available by setting MasterAnalysisOn==0 and then
# manually selecting the dateRange and readingwanted variables.
MasterAnalysisOn <- 1
if (MasterAnalysisOn==0) {
dateRange <- 5 # 1, 3 or 5 days
readingwanted <- 1 # 0-worst, 1-first, 2-mean
}
print(paste0("Date range: ", dateRange))
print(paste0("Reading wanted: ", readingwanted))
NBT_outcomes <- read.csv("NBT_outcomes.csv")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_DataPreparation.R")
# Libraries
library(ggplot2)
library(hrbrthemes)
library(tidyverse)
library(plotly)
library(BBmisc)
library(scales)
library(dplyr)
library(naniar)
library(gridExtra)
library(knitr)
library(ggplot2)
library(finalfit)
library(data.table)
# Global variables
# BatchAnalysisOn==1 prevents the dateRange and readingwanted variables from
# being overwritten, but the option to turn this off and run this script without
# first running MasterAnalysis.R is available by setting BatchAnalysisOn==0 and then
# manually selecting the dateRange and readingwanted variables.
# Location of Rscripts & save intermediate processed files
if (!exists('work_path')) {
work_path <- 'C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/'
}
# Load in original data files
if (!exists('data_path')) {
data_path <- paste(work_path, 'data/', sep = '')
}
#Set needed variables if we are not running LABMARCS_Analysis_Batch.R
if (!exists('BatchAnalysisOn')) {
dateRange <- 1 # 1, 3 or 5 days
readingwanted <- 0 # 0-worst, 1-first, 2-mean
}
if (readingwanted == 0) {
readingwanted_str <- 'worst'
} else if (readingwanted == 1) {
readingwanted_str <- 'first'
} else if (readingwanted == 2) {
readingwanted_str <- 'mean'
}
print(paste("Date range: ", dateRange))
print(paste("Reading wanted: ", readingwanted))
## Outcome data
### NBT Outcomes
setwd(data_path)
NBT_outcomes <- read.csv("NBT_outcomes.csv")
NBT_outcomes = NBT_outcomes %>%
rename(
ID = uob_ID,
admissionDate = admission_date,
dischargeDate = discharge_date,
)
NBT_outcomes$admissionDate = as.Date(NBT_outcomes$admissionDate, format = "%d/%m/%Y")
NBT_outcomes$dischargeDate = as.Date(NBT_outcomes$dischargeDate, format = "%d/%m/%Y")
NBT_outcomes_deaths = NBT_outcomes %>%
filter(DischargeOutcomeDesc == "Patient Died")
NBT_outcomes_deaths$deathDate = NBT_outcomes_deaths$dischargeDate
NBT_outcomes <- merge(NBT_outcomes,NBT_outcomes_deaths,all = TRUE)
NBT_outcomes$ITU_Start = as.Date(NBT_outcomes$ITU_Start, format = "%d/%m/%Y")
NBT_outcomes$ITU_End = as.Date(NBT_outcomes$ITU_End, format = "%d/%m/%Y")
NBT_outcomes$Site = "NBT"
NBT_outcomes2 <- dplyr::select(NBT_outcomes,c(ID,admissionDate,dischargeDate,
ITU_Start,ITU_End,deathDate,Site))
### UHB Outcomes
UHB_outcomes1 <- read.csv(file("UHB_outcomes1.csv"))
UHB_outcomes1 = UHB_outcomes1 %>%
rename(
ID = uob_ID,
admissionDate = attend_date,
deathDate = fu_death_date,
)
UHB_outcomes1$admissionDate = as.Date(UHB_outcomes1$admissionDate, format = "%d/%m/%Y")
UHB_outcomes1$dischargeDate = as.Date(UHB_outcomes1$admissionDate +
as.integer(UHB_outcomes1$hospital_length_of_stay))
UHB_outcomes1$deathDate = as.Date(UHB_outcomes1$deathDate, format = "%d/%m/%Y")
UHB_outcomes1$ITU_Start <- as.Date(NA)
UHB_outcomes1$ITU_End <- as.Date(NA)
UHB_outcomes1$Site = "UHB1"
UHB_outcomes12 = UHB_outcomes1 %>% dplyr::select(ID,admissionDate,dischargeDate,
ITU_Start,ITU_End,deathDate,Site)
UHB_outcomes2 <- read.csv(file("UHB_outcomes2.csv"))
UHB_outcomes2 = UHB_outcomes2 %>%
rename(
ID = uob_ID,
admissionDate = attend_dte,
)
UHB_outcomes2$admissionDate = as.Date(UHB_outcomes2$admissionDate, format = "%d/%m/%Y")
UHB_outcomes2 = UHB_outcomes2 %>%
rename(
dischargeDate = outcome_dte,
)
UHB_outcomes2$dischargeDate = as.Date(UHB_outcomes2$dischargeDate, format = "%d/%m/%Y")
UHB_outcomes2_deaths = UHB_outcomes2 %>%
filter(outcome == 3)
UHB_outcomes2_deaths$deathDate = UHB_outcomes2_deaths$dischargeDate
UHB_outcomes2 <- merge(UHB_outcomes2,UHB_outcomes2_deaths,all = TRUE)
UHB_outcomes2$ITU_Start <- as.Date(NA)
UHB_outcomes2$ITU_End <- as.Date(NA)
UHB_outcomes2$Site = "UHB2"
UHB_outcomes22 = UHB_outcomes2 %>% dplyr::select(ID,admissionDate,dischargeDate,
ITU_Start,ITU_End,deathDate,Site)
### Weston outcomes
WestonOutcomes <- read.csv(file("Weston.Outcomes.csv"))
WestonOutcomes = WestonOutcomes %>%
rename(
ID = uob_ID,
admissionDate = Admission.date,
dischargeDate = Discharge.date,
ITU_Start = ICU.Admission.Date,
ITU_End = ICU.Discharge.Date,
deathDate = Date.of.Death,
)
WestonOutcomes$admissionDate = as.Date(WestonOutcomes$admissionDate, format = "%d/%m/%Y")
WestonOutcomes$dischargeDate = as.Date(WestonOutcomes$dischargeDate, format = "%d/%m/%Y")
WestonOutcomes$ITU_Start = as.Date(WestonOutcomes$ITU_Start, format = "%d/%m/%Y")
WestonOutcomes$ITU_End = as.Date(WestonOutcomes$ITU_End, format = "%d/%m/%Y")
WestonOutcomes$deathDate = as.Date(WestonOutcomes$deathDate, format = "%d/%m/%Y")
WestonOutcomes$Site = "Weston"
WestonOutcomes2 = WestonOutcomes %>% dplyr::select(ID,admissionDate,dischargeDate,
ITU_Start,ITU_End,deathDate, Site)
## Merge Outcome data
# NBT Outcomes must be excluded as inconsistent?
# Not sure why Ed made this note - Ask!
totalOutcomes <- rbind(UHB_outcomes12,UHB_outcomes22,NBT_outcomes2,WestonOutcomes2)
totalOutcomes$deathDate = as.Date(totalOutcomes$deathDate, format = "%d/%m/%Y")
totalOutcomes$ITU_Start = as.Date(totalOutcomes$ITU_Start, format = "%d/%m/%Y")
totalOutcomes$ITU_End = as.Date(totalOutcomes$ITU_End, format = "%d/%m/%Y")
totalOutcomes$dischargeDate = as.Date(totalOutcomes$dischargeDate, format = "%d/%m/%Y")
# Libraries
library(ggplot2)
library(hrbrthemes)
library(tidyverse)
library(plotly)
library(BBmisc)
library(scales)
library(dplyr)
library(naniar)
library(gridExtra)
library(knitr)
library(ggplot2)
library(finalfit)
library(data.table)
# Global variables
# BatchAnalysisOn==1 prevents the dateRange and readingwanted variables from
# being overwritten, but the option to turn this off and run this script without
# first running MasterAnalysis.R is available by setting BatchAnalysisOn==0 and then
# manually selecting the dateRange and readingwanted variables.
# Location of Rscripts & save intermediate processed files
if (!exists('work_path')) {
work_path <- 'C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/'
}
# Load in original data files
if (!exists('data_path')) {
data_path <- paste(work_path, 'data/', sep = '')
}
#Set needed variables if we are not running LABMARCS_Analysis_Batch.R
if (!exists('BatchAnalysisOn')) {
dateRange <- 1 # 1, 3 or 5 days
readingwanted <- 0 # 0-worst, 1-first, 2-mean
}
if (readingwanted == 0) {
readingwanted_str <- 'worst'
} else if (readingwanted == 1) {
readingwanted_str <- 'first'
} else if (readingwanted == 2) {
readingwanted_str <- 'mean'
}
print(paste("Date range: ", dateRange))
print(paste("Reading wanted: ", readingwanted))
## Outcome data
### NBT Outcomes
setwd(data_path)
NBT_outcomes <- read.csv("NBT_outcomes.csv")
NBT_outcomes = NBT_outcomes %>%
rename(
ID = uob_ID,
admissionDate = admission_date,
dischargeDate = discharge_date,
)
NBT_outcomes$admissionDate = as.Date(NBT_outcomes$admissionDate, format = "%d/%m/%Y")
NBT_outcomes$dischargeDate = as.Date(NBT_outcomes$dischargeDate, format = "%d/%m/%Y")
NBT_outcomes_deaths = NBT_outcomes %>%
filter(DischargeOutcomeDesc == "Patient Died")
NBT_outcomes_deaths$deathDate = NBT_outcomes_deaths$dischargeDate
NBT_outcomes <- merge(NBT_outcomes,NBT_outcomes_deaths,all = TRUE)
NBT_outcomes$ITU_Start = as.Date(NBT_outcomes$ITU_Start, format = "%d/%m/%Y")
NBT_outcomes$ITU_End = as.Date(NBT_outcomes$ITU_End, format = "%d/%m/%Y")
NBT_outcomes$Site = "NBT"
NBT_outcomes2 <- dplyr::select(NBT_outcomes,c(ID,admissionDate,dischargeDate,
ITU_Start,ITU_End,deathDate,Site))
### UHB Outcomes
UHB_outcomes1 <- read.csv(file("UHB_outcomes1.csv"))
UHB_outcomes1 = UHB_outcomes1 %>%
rename(
ID = uob_ID,
admissionDate = attend_date,
deathDate = fu_death_date,
)
UHB_outcomes1$admissionDate = as.Date(UHB_outcomes1$admissionDate, format = "%d/%m/%Y")
UHB_outcomes1$dischargeDate = as.Date(UHB_outcomes1$admissionDate +
as.integer(UHB_outcomes1$hospital_length_of_stay))
UHB_outcomes1$deathDate = as.Date(UHB_outcomes1$deathDate, format = "%d/%m/%Y")
UHB_outcomes1$ITU_Start <- as.Date(NA)
UHB_outcomes1$ITU_End <- as.Date(NA)
UHB_outcomes1$Site = "UHB1"
UHB_outcomes12 = UHB_outcomes1 %>% dplyr::select(ID,admissionDate,dischargeDate,
ITU_Start,ITU_End,deathDate,Site)
UHB_outcomes2 <- read.csv(file("UHB_outcomes2.csv"))
UHB_outcomes2 = UHB_outcomes2 %>%
rename(
ID = uob_ID,
admissionDate = attend_dte,
)
UHB_outcomes2$admissionDate = as.Date(UHB_outcomes2$admissionDate, format = "%d/%m/%Y")
UHB_outcomes2 = UHB_outcomes2 %>%
rename(
dischargeDate = outcome_dte,
)
UHB_outcomes2$dischargeDate = as.Date(UHB_outcomes2$dischargeDate, format = "%d/%m/%Y")
UHB_outcomes2_deaths = UHB_outcomes2 %>%
filter(outcome == 3)
UHB_outcomes2_deaths$deathDate = UHB_outcomes2_deaths$dischargeDate
UHB_outcomes2 <- merge(UHB_outcomes2,UHB_outcomes2_deaths,all = TRUE)
UHB_outcomes2$ITU_Start <- as.Date(NA)
UHB_outcomes2$ITU_End <- as.Date(NA)
UHB_outcomes2$Site = "UHB2"
UHB_outcomes22 = UHB_outcomes2 %>% dplyr::select(ID,admissionDate,dischargeDate,
ITU_Start,ITU_End,deathDate,Site)
### Weston outcomes
WestonOutcomes <- read.csv(file("Weston.Outcomes.csv"))
WestonOutcomes = WestonOutcomes %>%
rename(
ID = uob_ID,
admissionDate = Admission.date,
dischargeDate = Discharge.date,
ITU_Start = ICU.Admission.Date,
ITU_End = ICU.Discharge.Date,
deathDate = Date.of.Death,
)
WestonOutcomes$admissionDate = as.Date(WestonOutcomes$admissionDate, format = "%d/%m/%Y")
WestonOutcomes$dischargeDate = as.Date(WestonOutcomes$dischargeDate, format = "%d/%m/%Y")
WestonOutcomes$ITU_Start = as.Date(WestonOutcomes$ITU_Start, format = "%d/%m/%Y")
WestonOutcomes$ITU_End = as.Date(WestonOutcomes$ITU_End, format = "%d/%m/%Y")
WestonOutcomes$deathDate = as.Date(WestonOutcomes$deathDate, format = "%d/%m/%Y")
WestonOutcomes$Site = "Weston"
WestonOutcomes2 = WestonOutcomes %>% dplyr::select(ID,admissionDate,dischargeDate,
ITU_Start,ITU_End,deathDate, Site)
## Merge Outcome data
# NBT Outcomes must be excluded as inconsistent?
# Not sure why Ed made this note - Ask!
totalOutcomes <- rbind(UHB_outcomes12,UHB_outcomes22,NBT_outcomes2,WestonOutcomes2)
totalOutcomes$deathDate = as.Date(totalOutcomes$deathDate, format = "%d/%m/%Y")
totalOutcomes$ITU_Start = as.Date(totalOutcomes$ITU_Start, format = "%d/%m/%Y")
totalOutcomes$ITU_End = as.Date(totalOutcomes$ITU_End, format = "%d/%m/%Y")
totalOutcomes$dischargeDate = as.Date(totalOutcomes$dischargeDate, format = "%d/%m/%Y")
totalOutcomes
len(totalOutcomes)
dim(totalOutcomes)
is.na(totalOutcomes)
totalOutcomes
names(totalOutcomes)
is.na(totalOutcomes$ITU_Start)
sum(is.na(totalOutcomes$ITU_Start))
sum(is.na(totalOutcomes$ITU_End))
sum(is.na(totalOutcomes$deathDate))
sum(~is.na(totalOutcomes$ITU_End))
sum(!is.na(totalOutcomes$ITU_End))
sum(!is.na(totalOutcomes$deathDate))
install.packages("AMR")
ab_from_text("28/03/2020 regular amoxicilliin 500mg po tds")
library('AMR')
ab_from_text("28/03/2020 regular amoxicilliin 500mg po tds")
z=ab_from_text("28/03/2020 regular amoxicilliin 500mg po tds")
z
group(z)
ab_group(z)
ab_group(z[[1]])
abx
z
z[1]
z[[1]
z[[1]]
z[[1]]
# if you want to know which antibiotic groups were administered, do e.g.:
abx <- ab_from_text("500 mg amoxi po and 400mg cipro iv")
ab_group(abx[[1]])
if (require("dplyr")) {
tibble(clinical_text = c("given 400mg cipro and 500 mg amox",
"started on doxy iv today")) %>%
mutate(abx_codes = ab_from_text(clinical_text),
abx_doses = ab_from_text(clinical_text, type = "doses"),
abx_admin = ab_from_text(clinical_text, type = "admin"),
abx_coll = ab_from_text(clinical_text, collapse = "|"),
abx_coll_names = ab_from_text(clinical_text,
collapse = "|",
translate_ab = "name"),
abx_coll_doses = ab_from_text(clinical_text,
type = "doses",
collapse = "|"),
abx_coll_admin = ab_from_text(clinical_text,
type = "admin",
collapse = "|"))
}
tb =tibble(clinical_text = c("given 400mg cipro and 500 mg amox",
"started on doxy iv today")) %>%
mutate(abx_codes = ab_from_text(clinical_text),
abx_doses = ab_from_text(clinical_text, type = "doses"),
abx_admin = ab_from_text(clinical_text, type = "admin"),
abx_coll = ab_from_text(clinical_text, collapse = "|"),
abx_coll_names = ab_from_text(clinical_text,
collapse = "|",
translate_ab = "name"),
abx_coll_doses = ab_from_text(clinical_text,
type = "doses",
collapse = "|"),
abx_coll_admin = ab_from_text(clinical_text,
type = "admin",
collapse = "|"))
tb
tb[1,]
tb[1,1]
tb[1,2]
tb[1,3]
tb[1,4]
tb[[1,2]]
tb[[1,3]]
tb[[1,4]]
tb[[1,5]]
tb[[1,6]]
tb[[1,7]]
tb[[1,8]]
tb

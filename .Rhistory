idPositive = total$positiveDate[total$ID==id]
# Get all values for this ID and variable within the daterange from positive date
all_values = poctLAC[poctLAC$ID==id,][(idDates >= idPositive & idDates < (idPositive + dateRange)),]$poctLAC_val
# If all_values contains any values, then proceed
if(length(!is.na(all_values))>0 & !is.na(idPositive)) {
if (readingwanted == 0) {
# Determine the lowest value
lowest = suppressWarnings(min(all_values,na.rm=TRUE))
# Determine the highest value
highest = suppressWarnings(max(all_values,na.rm=TRUE))
# Compare the lowest and highest values against the range, evaluate to true if
# either are outside the range, and assign "Abnormal", else "Normal"
value = if_else((lowest < 0.5 | highest > 2.2),"Abnormal","Normal")
}
if (readingwanted == 1) {
# select earliest test value in the list
first <- all_values[1]
# assign "Abnormal" if outside clinical range, else "Normal"
value = if_else((first < 0.5 | first > 2.2),"Abnormal","Normal")
}
if (readingwanted == 2) {
average = mean(all_values)
value = if_else((average < 0.5 | average > 2.2),"Abnormal","Normal")
}
# Add this
poctLAC2 <- poctLAC2 %>% add_row(ID=id,poctLAC_val=value)
}
}
poctLAC <- poctLAC2
rm(poctLAC2)
poctO2 <- read.csv(file("poctO2.csv"))
O2 <- poctO2 %>%
filter(Test.Desc == "Arterial pO2")
O2$Date.of.Specimen = as.Date(O2$Date.of.Specimen, format="%d/%m/%Y")
O2 = O2 %>%
rename(
date = Date.of.Specimen,
ID = uob_ID,
)
O2 = O2 %>%
rename(
time = Time.of.Specimen,
)
O2 = O2 %>%
rename(
O2_val = Numeric.Result,
)
#Combine date and time
O2$dateTime = as.POSIXct(paste(O2$date, O2$time), format="%Y-%m-%d %H:%M:%S")
O2 = O2 %>% dplyr::select(ID,date,O2_val)
O2 <- O2[complete.cases(O2),]
O22 <- data.frame(ID=character(),
O2_val=character())
commonIDs <- intersect(total$ID,O2$ID)
for (id in (unique(commonIDs))){
# Get all dates for this ID and variable
idDates = O2[O2$ID==id,]$date
# Sort the data by date
idDates = sort(idDates, decreasing = FALSE)
# Find covid positive test for this ID
idPositive = total$positiveDate[total$ID==id]
# Get all values for this ID and variable within the daterange from positive date
all_values = O2[O2$ID==id,][(idDates >= idPositive & idDates < (idPositive + dateRange)),]$O2_val
# If all_values contains any values, then proceed
if(length(!is.na(all_values))>0 & !is.na(idPositive)) {
if (readingwanted == 0) {
# Determine the lowest value
lowest = suppressWarnings(min(all_values,na.rm=TRUE))
# Determine the highest value
highest = suppressWarnings(max(all_values,na.rm=TRUE))
# Compare the lowest and highest values against the range, evaluate to true if
# either are outside the range, and assign "Abnormal", else "Normal"
value = if_else((lowest < 11 | highest > 14.4),"Abnormal","Normal")
}
if (readingwanted == 1) {
# select earliest test value in the list
first <- all_values[1]
# assign "Abnormal" if outside clinical range, else "Normal"
value = if_else((first < 11 | first > 14.4),"Abnormal","Normal")
}
if (readingwanted == 2) {
average = mean(all_values)
value = if_else((average < 11 | average > 14.4),"Abnormal","Normal")
}
# Add this
O22 <- O22 %>% add_row(ID=id,O2_val=value)
}
}
O2 <- O22
rm(O22)
CO2 <- poctO2 %>%
filter(Test.Desc == "Arterial pCO2")
#Format date
CO2$Date.of.Specimen = as.Date(CO2$Date.of.Specimen, format="%d/%m/%Y")
CO2 = CO2 %>%
rename(
date = Date.of.Specimen,
ID = uob_ID,
)
CO2 = CO2 %>%
rename(
time = Time.of.Specimen,
)
CO2 = CO2 %>%
rename(
CO2_val = Numeric.Result,
)
#Combine date and time
CO2$dateTime = as.POSIXct(paste(CO2$date, CO2$time), format="%Y-%m-%d %H:%M:%S")
CO2 = CO2 %>% dplyr::select(ID,date,CO2_val)
CO2 <- CO2[complete.cases(CO2),]
CO22 <- data.frame(ID=character(),
CO2_val=character())
commonIDs <- intersect(total$ID,CO2$ID)
for (id in (unique(commonIDs))){
# Get all dates for this ID and variable
idDates = CO2[CO2$ID==id,]$date
# Sort the data by date
idDates = sort(idDates, decreasing = FALSE)
# Find covid positive test for this ID
idPositive = total$positiveDate[total$ID==id]
# Get all values for this ID and variable within the daterange from positive date
all_values = CO2[CO2$ID==id,][(idDates >= idPositive & idDates < (idPositive + dateRange)),]$CO2_val
# If all_values contains any values, then proceed
if(length(!is.na(all_values))>0 & !is.na(idPositive)) {
if (readingwanted == 0) {
# Determine the lowest value
lowest = suppressWarnings(min(all_values,na.rm=TRUE))
# Determine the highest value
highest = suppressWarnings(max(all_values,na.rm=TRUE))
# Compare the lowest and highest values against the range, evaluate to true if
# either are outside the range, and assign "Abnormal", else "Normal"
value = if_else((lowest < 4.6 | highest > 6.4),"Abnormal","Normal")
}
if (readingwanted == 1) {
# select earliest test value in the list
first <- all_values[1]
# assign "Abnormal" if outside clinical range, else "Normal"
value = if_else((first < 4.6 | first > 6.4),"Abnormal","Normal")
}
if (readingwanted == 2) {
average = mean(all_values)
value = if_else((average < 4.6 | average > 6.4),"Abnormal","Normal")
}
# Add this
CO22 <- CO22 %>% add_row(ID=id,CO2_val=value)
}
}
CO2 <- CO22
rm(CO22)
poctpH <- read.csv(file("poctpH.csv"))
#Format date
poctpH$Date.of.Specimen = as.Date(poctpH$Date...Time.of.Specimen, format="%d/%m/%Y")
poctpH = poctpH %>%
rename(
date = Date...Time.of.Specimen,
ID = uob_ID,
)
poctpH = poctpH %>%
rename(
time = Time.of.Specimen,
)
poctpH = poctpH %>%
rename(
poctpH_val = Numeric.Result,
)
#Combine date and time
poctpH$dateTime = as.POSIXct(paste(poctpH$date, poctpH$time), format="%Y-%m-%d %H:%M:%S")
poctpH$date = as.Date(poctpH$date, format="%d/%m/%Y")
poctpH = poctpH %>% dplyr::select(ID,date,poctpH_val)
poctpH <- poctpH[complete.cases(poctpH),]
poctpH2 <- data.frame(ID=character(),
poctpH_val=character())
commonIDs <- intersect(total$ID,poctpH$ID)
for (id in (unique(commonIDs))){
# Get all dates for this ID and variable
idDates = poctpH[poctpH$ID==id,]$date
# Sort the data by date
idDates = sort(idDates, decreasing = FALSE)
# Find covid positive test for this ID
idPositive = total$positiveDate[total$ID==id]
# Get all values for this ID and variable within the daterange from positive date
all_values = poctpH[poctpH$ID==id,][(idDates >= idPositive & idDates < (idPositive + dateRange)),]$poctpH_val
# If all_values contains any values, then proceed
if(length(!is.na(all_values))>0 & !is.na(idPositive)) {
if (readingwanted == 0) {
# Determine the lowest value
lowest = suppressWarnings(min(all_values,na.rm=TRUE))
# Determine the highest value
highest = suppressWarnings(max(all_values,na.rm=TRUE))
# Compare the lowest and highest values against the range, evaluate to true if
# either are outside the range, and assign "Abnormal", else "Normal"
value = if_else((lowest < 7.35 | highest > 7.45),"Abnormal","Normal")
}
if (readingwanted == 1) {
# select earliest test value in the list
first <- all_values[1]
# assign "Abnormal" if outside clinical range, else "Normal"
value = if_else((first < 7.35 | first > 7.45),"Abnormal","Normal")
}
if (readingwanted == 2) {
average = mean(all_values)
value = if_else((average < 7.35 | average > 7.45),"Abnormal","Normal")
}
# Add this
poctpH2 <- poctpH2 %>% add_row(ID=id,poctpH_val=value)
}
}
poctpH <- poctpH2
rm(poctpH2)
Vir <- read.csv(file("Vir.csv"))
Vir['Measure']='Vir'
Vir$Sample.Date = as.Date(Vir$Sample.Date, format="%d/%m/%Y")
Vir = Vir %>%
rename(
ID = uob_ID,
date = Sample.Date,
Adenovirus = Adenovirus..PCR.,
Human_Metapneumovirus = Human.metapneumovirus..PCR.,
Influenza_A = Influenza.A..PCR.,
Influenza_B = Influenza.B..PCR.,
Parainfluenza_Type_1 = Parainfluenza.Type.1..PCR.,
Parainfluenza_Type_2 = Parainfluenza.Type.2..PCR.,
Parainfluenza_Type_3 = Parainfluenza.Type.3..PCR.,
Parainfluenza_Type_4 = Parainfluenza.Type.4..PCR.,
Respiratory_Syncytial_Virus = Respiratory.Syncytial.Virus..PCR.,
Rhinovirus = Rhinovirus..PCR.,
)
Vir <- Vir %>% mutate(viral_coinfection = if_else((Adenovirus  == "POSITIVE" | Human_Metapneumovirus  == "POSITIVE" | Influenza_A  == "POSITIVE" | Influenza_B  == "POSITIVE" | Parainfluenza_Type_1  == "POSITIVE" | Parainfluenza_Type_2  == "POSITIVE" | Parainfluenza_Type_3  == "POSITIVE" | Parainfluenza_Type_4  == "POSITIVE" | Respiratory_Syncytial_Virus  == "POSITIVE" | Rhinovirus  == "POSITIVE"),TRUE,FALSE))
Vir <- Vir %>% dplyr::select(ID,date,viral_coinfection)
Vir <- Vir[complete.cases(Vir),]
Vir2 <- data.frame(ID=character(),
viral_coinfection=logical())
commonIDs <- intersect(total$ID,Vir$ID)
for (id in unique(commonIDs)){
# Return all values for the admission date for this ID
# Find the average value for these dates
# Store in new table for that variable where we have one value per date per
idDates = Vir[Vir$ID==id,]$date
idPositive = total$positiveDate[total$ID==id]
presence = TRUE %in% (Vir[Vir$ID==id,][(idDates >= idPositive & idDates < (idPositive + dateRange)),]$viral_coinfection)
Vir2 <- Vir2 %>% add_row(ID=id,viral_coinfection=presence)
}
Vir <- Vir2
rm(Vir2)
BC <- read.csv(file("BC.csv"))
BC['Measure']='BC'
BC$Date.of.Specimen = as.Date(BC$Date.of.Specimen, format="%d/%m/%Y")
BC = BC %>%
rename(
date = Date.of.Specimen,
ID = uob_ID,
)
BC <- BC %>% mutate(bc_coinfection = if_else((Organism.Desc != "Negative BC" & Source.Desc != "? Contaminant"),TRUE,FALSE))
BC <- BC %>% dplyr::select(ID,date,bc_coinfection)
BC <- BC[complete.cases(BC),]
BC2 <- data.frame(ID=character(),
bc_coinfection=logical())
commonIDs <- intersect(total$ID,Vir$ID)
for (id in unique(commonIDs)){
# Return all values for the admission date for this ID
# Find the average value for these dates
# Store in new table for that variable where we have one value per date per
idDates = BC[BC$ID==id,]$date
idPositive = total$positiveDate[total$ID==id]
presence = TRUE %in% (BC[BC$ID==id,][(idDates >= idPositive & idDates < (idPositive + dateRange)),]$bc_coinfection)
BC2 <- BC2 %>% add_row(ID=id,bc_coinfection=presence)
}
BC <- BC2
rm(BC2)
Resp <- read.csv(file("Resp.csv"))
Resp['Measure']='Resp'
Resp$Date.of.Specimen = as.Date(Resp$Date.of.Specimen, format="%d/%m/%Y")
Resp = Resp %>%
rename(
ID = uob_ID,
date = Date.of.Specimen,
)
Resp <- Resp %>% mutate(resp_coinfection = if_else((Organism.Desc != "Negative Sp"),TRUE,FALSE))
Resp <- Resp %>% dplyr::select(ID,date,resp_coinfection)
Resp <- Resp[complete.cases(Resp),]
Resp2 <- data.frame(ID=character(),
resp_coinfection=logical())
commonIDs <- intersect(total$ID,Vir$ID)
for (id in unique(commonIDs)){
# Return all values for the admission date for this ID
# Find the average value for these dates
# Store in new table for that variable where we have one value per date per
idDates = Resp[Resp$ID==id,]$date
idPositive = total$positiveDate[total$ID==id]
presence = TRUE %in% (Resp[Resp$ID==id,][(idDates >= idPositive & idDates < (idPositive + dateRange)),]$resp_coinfection)
Resp2 <- Resp2 %>% add_row(ID=id,resp_coinfection=presence)
}
Resp <- Resp2
rm(Resp2)
Urine <- read.csv(file("Urine.csv"))
Urine['Measure']='Urine'
Urine$Date.of.Specimen = as.Date(Urine$Date.of.Specimen, format="%d/%m/%Y")
Urine = Urine %>%
rename(
ID = uob_ID,
date = Date.of.Specimen,
)
Urine <- Urine %>% mutate(urine_coinfection = if_else((Organism.Desc != "Negative MSU"),TRUE,FALSE))
Urine <- Urine %>% dplyr::select(ID,date,urine_coinfection)
Urine <- Urine[complete.cases(Urine),]
Urine2 <- data.frame(ID=character(),
urine_coinfection=logical())
commonIDs <- intersect(total$ID,Vir$ID)
for (id in unique(commonIDs)){
# Return all values for the admission date for this ID
# Find the average value for these dates
# Store in new table for that variable where we have one value per date per
idDates = Urine[Urine$ID==id,]$date
idPositive = total$positiveDate[total$ID==id]
presence = TRUE %in% (Urine[Urine$ID==id,][(idDates >= idPositive & idDates < (idPositive + dateRange)),]$urine_coinfection)
Urine2 <- Urine2 %>% add_row(ID=id,urine_coinfection=presence)
}
Urine <- Urine2
rm(Urine2)
variables = list(BE,BNP,CRP,DDM,eGFR,FER,fib,Glucose,HB,HBA1c,LDH,PCT,PLT,trig,trop,FBCLymph,FBCNeutr,FBCWCC,FBCNLR,ClotAPTT,ClotPT,poctLAC,O2,CO2,poctpH,Vir,BC,Resp,Urine)
for (variable in variables){
total <- merge(total,variable, all.x=TRUE)
}
total <- total %>% mutate(coinfection = if_else((viral_coinfection == TRUE | resp_coinfection == TRUE | bc_coinfection == TRUE | urine_coinfection == TRUE),TRUE,FALSE,FALSE))
totalBinary <- total
AvonCap <- read.csv(file("AvonCap.csv"))
AvonCap = AvonCap %>% rename(ID = uob_ID)
AvonCap <- AvonCap[!duplicated(AvonCap$ID),]
AvonCap <- subset(AvonCap, select = -c(Repeat.Instrument,Repeat.Instance,
COVID.19.diagnosis))
AvonCap = AvonCap %>%
rename(
Community.Pneumonia.Radio = Final.Standard.of.Care.LRTD.related.diagnosis..choice.CAP...radiologically.confirmed.,
Community.Pneumonia.Clin = Final.Standard.of.Care.LRTD.related.diagnosis..choice.CAP...clinically.confirmed..but.not.on.radiology..,
Community.Acquired.Pneumonia.No = Final.Standard.of.Care.LRTD.related.diagnosis..choice.CAP...no.radiology.performed.,
Acute_bronchitis = Final.Standard.of.Care.LRTD.related.diagnosis..choice.Acute.bronchitis.,
Exacerbation_of_COPD = Final.Standard.of.Care.LRTD.related.diagnosis..choice.Exacerbation.of.COPD.,
Empyema_lung_abscess = Final.Standard.of.Care.LRTD.related.diagnosis..choice.Empyema.lung.abscess.,
LRTI_not_further_specified = Final.Standard.of.Care.LRTD.related.diagnosis..choice.LRTI...not.further.specified.,
Congestive_heart_failure = Final.Standard.of.Care.LRTD.related.diagnosis..choice.Congestive.heart.failure.,
Non_infectious_process = Final.Standard.of.Care.LRTD.related.diagnosis..choice.Non.infectious.process.,
Non_LRTD_infection_related_diagnosis = Final.Standard.of.Care.LRTD.related.diagnosis..choice.Non.LRTD.infection.related.diagnosis.,
Oth.LRTI.Specified =
Final.Standard.of.Care.LRTD.related.diagnosis..choice.Other.LRTI.specified.,
NYHA_Heart_failure = NYHA...Heart.Failure..nbsp.,
CRB65_Score = CRB65.Score,
NEWS2_Score = NEWS.2.Score,
Respiratory_Disease_None = Respiratory.Disease..choice.None.,
COPD = Respiratory.Disease..choice.COPD..Chronic.Obstructive.Pulmonary.Disease.Emphysema..,
Asthma = Respiratory.Disease..choice.Asthma.,
Bronchiectasis = Respiratory.Disease..choice.Bronchiectasis.,
Pulmonary_Fibrosis_Interstitial_Lung_Disease = Respiratory.Disease..choice.Pulmonary.Fibrosis.Interstitial.Lung.Disease.,
Respiratory_Disease_other = Respiratory.Disease..choice.Other.,
Chronic_heart_disease_none = Chronic.Heart.Disease..choice.None.,
Hypertension = Chronic.Heart.Disease..choice.Hypertension.,
Atrial_Fibrillation = Chronic.Heart.Disease..choice.Atrial.Fibrillation.,
Ischaemic_heart_disease = Chronic.Heart.Disease..choice.Ischaemic.heart.disease.,
Heart_failure = Chronic.Heart.Disease..choice.Heart.failure.CCF.,
Chronic_heart_disease_other = Chronic.Heart.Disease..choice.Other.,
Chronic_Kidney_Disease = Chronic.Kidney.Disease..CKD..Mod.Severe..eGFR..30..Cr.265.umol.L..dialysis..transplantation..uremic.syndrome,
Liver_disease = Liver.Disease.Mild...nbsp.cirrhosis.without.portal.HTN..chronic.hepatitis..Mod.Severe...nbsp.cirrhosis.with.portal.HTN.....variceal.bleeding,
Diabetes = Diabetes,
Cognitive_Impairment_Dementia_none = Cognitive.Impairment.Dementia..choice.None.,
Dementia = Cognitive.Impairment.Dementia..choice.Dementia.,
Cognitive_impairment = Cognitive.Impairment.Dementia..choice.Cognitive.Impairment.,
CVA_Stroke = Cognitive.Impairment.Dementia..choice.CVA..stroke..,
TIA_mini_stroke = Cognitive.Impairment.Dementia..choice.TIA..mini.stroke..,
Hemiplegiahemiplegia_or_paraplegia = Hemiplegiahemiplegia.or.paraplegia,
Peripheral_vascular_disease = Peripheral.Vascular.Disease.Intermittent.claudication..periph..arterial.bypass.for.insufficiency..gangrene..acute.arterial.insufficiency..untreated.aneurysm....6cm..nbsp.,
Immunosuppressive_medication = Immunosuppressive.Medication.includes.oral.steroids..biologics..chemotherapy.,
Immunodeficiency = Immunodeficiency.eg.SCID..hypogammaglobulinaemia..splenectomy.,
Connective_tissue_disease = Connective.Tissue.Disease..SLE..polymyositis..mixed.nbsp.Connective.Tissue.Disease..polymyalgia.rheumatica..moderate.to.severe.Rheumatoid.Arthritis.,
HIV_negative_or_not_tested = HIV.status..choice.Negative..no.HIV...or.not.tested.,
HIV_positive = HIV.status..choice.HIV.,
AIDS = HIV.status..choice.AIDS.,
Solid_organ_cancer_malignancy = Solid.Organ.Cancer.Malignancy.Initially.treated.in.the.last.5.years.exclude.non.melanomatous.skin.cancers.and.in.situ.cervical.carcinoma,
Organ_transplantation = Organ.Transplantation,
Pregnancy_post_partum = Pregnancy.Post.partum,
Gastric_Duodenal_Ulcer_disease = Gastric.Duodenal.Ulcer.Disease.Patients.who.have.required.treatment.for.PUD.nbsp.,
Rockwood_frailty_score = Rockwood.Frailty.Score,
Radiology_result = Radiology.Result
)
AvonCap <- subset(AvonCap, select = c(ID,PSI,
NYHA_Heart_failure,CRB65_Score,
NEWS2_Score,COPD,Asthma,Bronchiectasis,
Respiratory_Disease_other, Hypertension,
Chronic_Kidney_Disease,Liver_disease,
Diabetes,CVA_Stroke,TIA_mini_stroke,
Immunodeficiency, HIV_positive))
totalBinary <- merge(total,AvonCap,by=c("ID"),all.x=TRUE)
drop <- c("ID","admissionDate","dischargeDate","Gender","Age","died","went_to_icu","severeOutcome")
missingData = total[,!(names(total) %in% drop)]
missingData %>% ff_glimpse()
missingData %>% missing_plot()
#replaceNAs_totalBinary <- totalBinary %>% dplyr::select(-ID,-admissionDate,-dischargeDate,-ITU_End,-ITU_Start,-deathDate,-Gender,-Age,-died,-went_to_icu,-severeOutcome,-positiveDate,-coinfection) %>% replace_na("Test not taken")
all_columns <- c("BE_val","BNP_val","CRP_val","DDM_val","eGFR_val","FER_val","fib_val","Glucose_val","HB_val","HBA1c_val","LDH_val","PCT_val","PLT_val","trig_val","trop_val","Lymphocytes","Neutrophils","WCC","NLR_val","APTT_val","PT_val","poctLAC_val","O2_val","CO2_val","poctpH_val","viral_coinfection","bc_coinfection","resp_coinfection","urine_coinfection")
imputed_columns <- c("eGFR_val","WCC","Neutrophils","Lymphocytes","NLR_val","HB_val","PLT_val","CRP_val")
# Test not taken columns
tnt_columns <- setdiff(all_columns, imputed_columns)
# Replace NA with "Test not taken"
totalBinary[tnt_columns][is.na(totalBinary[tnt_columns])] <- "Test not taken"
totalBinary$OnAdmission <- with(totalBinary, ifelse(positiveDate-admissionDate >=8,
FALSE,TRUE))
if (dateRange==1) {
if (readingwanted==0) {
print("1 worst saved")
write.csv(x=totalBinary, file="totalBinary1worst.csv")
}
if (readingwanted==1) {
print("1 first saved")
write.csv(x=totalBinary, file="totalBinary1first.csv")
}
if (readingwanted==2) {
print("1 mean saved")
write.csv(x=totalBinary, file="totalBinary1mean.csv")
}
}
if (dateRange==3) {
if (readingwanted==0) {
print("3 worst saved")
write.csv(x=totalBinary, file="totalBinary3worst.csv")
}
if (readingwanted==1) {
print("3 first saved")
write.csv(x=totalBinary, file="totalBinary3first.csv")
}
if (readingwanted==2) {
print("3 mean saved")
write.csv(x=totalBinary, file="totalBinary3mean.csv")
}
}
if (dateRange==5) {
if (readingwanted==0) {
print("5 worst saved")
write.csv(x=totalBinary, file="totalBinary5worst.csv")
}
if (readingwanted==1) {
print("5 first saved")
write.csv(x=totalBinary, file="totalBinary5first.csv")
}
if (readingwanted==2) {
print("5 mean saved")
write.csv(x=totalBinary, file="totalBinary5mean.csv")
}
}
source("Z:/brian/LABMARCS-main/LogisticLABMARCSall.R", echo=TRUE)
source("Z:/brian/LABMARCS-main/LogisticLABMARCSall.R", echo=TRUE)
source("Z:/brian/LABMARCS-main/CoxLABMARCSall.R", echo=TRUE)
install.packages('brms')
install.packages("rstanarm")
length(str)
install.packages("Rtools")
Sys.which("make")
Sys.which("make")
install.packages("rstanarm")
library(rstanarm)
library(ggplot2)
library(hrbrthemes)
library(tidyverse)
library(plotly)
library(BBmisc)
library(scales)
library(dplyr)
library(naniar)
library(gridExtra)
library(knitr)
library(ggplot2)
library(hrbrthemes)
library(tidyverse)
library(plotly)
library(BBmisc)
library(scales)
library(dplyr)
library(naniar)
library(gridExtra)
library(knitr)
library(finalfit)
library(data.table)
# Global variables
# MasterAnalysisOn==1 prevents the dateRange and readingwanted variables from
# being overwritten, but the option to turn this off and run this script without
# first running MasterAnalysis.R is available by setting MasterAnalysisOn==0 and then
# manually selecting the dateRange and readingwanted variables.
MasterAnalysisOn <- 1
if (MasterAnalysisOn==0) {
dateRange <- 5 # 1, 3 or 5 days
readingwanted <- 1 # 0-worst, 1-first, 2-mean
}
print(paste0("Date range: ", dateRange))
print(paste0("Reading wanted: ", readingwanted))
NBT_outcomes <- read.csv("NBT_outcomes.csv")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression.R")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression.R")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression.R")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression.R")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression.R")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression_JULY30.R")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression_JULY30.R")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression_JULY30.R")
View(freqpairs)
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression_JULY30.R")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression_JULY30.R")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression_JULY30.R")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression_JULY30.R")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression.R")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression.R")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_Analysis_Batch.R")
output_path
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression.R")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_LogisticRegression.R")
source("C:/Users/bs16044/OneDrive - University of Bristol/HDR-UK-AMR/LABMARCS/brian/LABMARCS_Analysis_Batch.R")
